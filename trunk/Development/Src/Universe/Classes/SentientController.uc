/**
 *	SentientController
 *
 *	Creation date: 19.03.2012 16:33
 *	Copyright 2012, FrozenHell Skyline
 */
class SentientController extends GameAIController;

// ссылка на игрока
var Pawn Player;

// задержка между выстрелами
var float WaitAttack;

// расстояние, с которого будет производиться атака
var() float AtackRange;

// максимальное расстояние на котором атака считается ближней
var const float MaxMeleeRange;

// тип атаки (нужно убрать)
enum EAtackType
{
	AT_Melee,						// только ближний бой
	AT_RunAttack,				// подбег на определённой расстояние и атака
	AT_AttackRunAttack,	// бег -> стрельба -> бег -> .. пока не подбежит на определённое расстояние, затем обычная атака
	AT_AttackRunMelee,		// бег -> стрельба -> бег -> .. пока не подбежит в упор, затем ближняя атака
	AT_StandAttack				// атака стоя на месте спауна
};

// фракция
enum EFraction
{
	Fr_Citizen,  // горожанин
	Fr_Traveler, // путешественник
	Fr_Mercenary // наёмник
};

// тип атаки по умолчанию
var() EAtackType AtackType;

// -----------------конец объявления переменных---------------------


// начальное состояние - состояние покоя
auto State Idle
{

Begin:
	// назначаем врагом игрока
	if (Enemy == None)
	{
		Player = SearchPlayer();
		`log(SearchPlayer());
		SetEnemy(Player);
		StartEnemyAtack();
	}
	else if (Enemy == SearchPlayer())
	{
		StartEnemyAtack();
	}
	
	Sleep(5);
	GoTo 'Begin';
}

// состояние атаки
State Atack
{
	ignores SeePlayer, SeeMonster, TakeDamage, HearNoise;
	
	// отключение стрельбы через интеревалы
	function TimerFiring()
	{
		StopShootWeapon(0);
	}
	
Begin:
	MoveTo(Pawn.Location, Enemy, 10, true); // посмотреть в сторону игрока
	
GivePain:
	// враг существует?
	if (Enemy != none)
	{
		if (!Enemy.IsAliveAndWell())
		{
			// враг мёртв
			StopShootWeapon(0); // хватит стрелять
			GoToState('Idle'); // переходим в состояние покоя
		}
	}
	else
	{
		// враг - больше не враг, или что-то пошло не так
		StopShootWeapon(0); // хватит стрелять
		GoToState('Idle'); // переходим в состояние покоя
	}
	
	// действуем в зависимости от выбранного типа атаки
	switch (AtackType)
	{
		case AT_Melee:
			// подбежать в упор
			MoveToward(Enemy, Enemy, MaxMeleeRange - 50,, true);
			// прибежали?
			if (VSize(Pawn.Location - Enemy.Location) < MaxMeleeRange)
			{
				// нанести удар
				ShootWeapon(0);
				// задержка после выстрела
				SetTimer(1, false, 'TimerFiring'); // 1 - задержка
			}
			break;
		case AT_RunAttack:
			// бежать на расстояние огня
			MoveToward(Enemy, Enemy, AtackRange - 100,, true);
			// достигли расстояния для выстрела
			if (VSize(Pawn.Location - Enemy.Location) < AtackRange) // добавить проверку на видимость игрока
			{
				// нанести удар
				//TakeFocus(Enemy);
				if (CanSee(Enemy))
				{
					ShootWeapon(0);
					// задержка после выстрела
					StopShootWeapon(0);
					//SetTimer(1, false, 'TimerFiring'); // 1 - задержка
				}
			}
			break;
		case AT_AttackRunAttack:
			// не дописано
			break;
		case AT_AttackRunMelee:
			// не дописано
			break;
		case AT_StandAttack:
			// не дописано
			break;
	}
	sleep(WaitAttack);
	Goto 'GivePain';
}

// ------------------конец состояний----------------------


// инициализация контроллера
simulated event PostBeginPlay()
{
	super.PostBeginPlay();
}

// бот слышит шум
event HearNoise(float Loudness, Actor NoiseMaker, optional Name NoiseType)
{
	//StartEnemyAtack();
}

// бот видит игрока
event SeePlayer(Pawn seen)
{
	// если игрок - враг
	if (seen == Enemy)
	{
		StartEnemyAtack();
	}
}

// поиск игрока
function Pawn SearchPlayer()
{
	local Pawn PW;
	foreach AllActors(class'Pawn', PW)
	{
		if (PW.IsPlayerPawn())
		{
			return PW;
		}
	}
	return None; // игрок не найден
}

// назначение боту врага
function SetEnemy(Pawn P)
{
	if (Enemy == None || Enemy != P)
	{
		Enemy = P;
	}
}

// прицеливание
function TakeFocus(Pawn P)
{
	Pawn.SetViewRotation(rotator(P.Location - Pawn.Location));
}

// старт атаки
function StartEnemyAtack()
{
	//`log(name@"StartAtack()");
	// атаковать
	GoToState('Atack');
}

// прекращение атаки
function StopEnemyAtack()
{
	GoToState('Idle');
}

// выстрелить из оружия (или ударить ближним боем)
function ShootWeapon(optional byte fireType = 0)
{ // fireType - тип атаки (для UnrealTournament аналогично ЛКМ и ПКМ)
	Pawn.StartFire(fireType);
}

// прекратить огонь
function StopShootWeapon(optional byte fireType = 0)
{
	Pawn.StopFire(fireType);
}

defaultproperties
{
	AtackRange = 1000
	MaxMeleeRange = 100
	WaitAttack = 1
	AtackType = AT_RunAttack
	Name="AngryBotsController__"
}